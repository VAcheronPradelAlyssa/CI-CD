name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job pour le Back-end
  backend-tests:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run Backend Tests
      working-directory: ./back
      run: |
        mvn clean test
        mvn jacoco:report

    - name: Generate JaCoCo Badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2
      with:
        jacoco-csv-file: back/target/site/jacoco/jacoco.csv

    - name: Upload Backend Coverage Reports
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-report
        path: back/target/site/jacoco/

    - name: Comment Coverage on PR
      if: github.event_name == 'pull_request'
      uses: madrapps/jacoco-report@v1.6.1
      with:
        paths: ${{ github.workspace }}/back/target/site/jacoco/jacoco.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        min-coverage-overall: 40
        min-coverage-changed-files: 60

  # Job pour le Front-end
  frontend-tests:
    name: Frontend Tests & Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: front/package-lock.json

    - name: Install Frontend Dependencies
      working-directory: ./front
      run: npm ci

    - name: Run Frontend Tests with Coverage
      working-directory: ./front
      run: npm run test:ci

    - name: Upload Frontend Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-coverage-report
        path: front/coverage/

    - name: Debug Coverage Files
      working-directory: ./front
      run: |
        echo "=== Debug Coverage Generation ==="
        echo "Contents of coverage directory:"
        ls -la coverage/ 2>/dev/null || echo "Coverage directory not found"
        echo ""
        echo "Looking for lcov.info:"
        if [ -f "coverage/lcov.info" ]; then
          echo "✅ lcov.info found"
          echo "File size: $(wc -c < coverage/lcov.info) bytes"
          echo "First 5 lines:"
          head -5 coverage/lcov.info 2>/dev/null || echo "Could not read file"
        else
          echo "❌ lcov.info not found"
        fi
        echo ""
        echo "All files in coverage:"
        find coverage/ -type f 2>/dev/null || echo "No files found"

    - name: Generate Frontend Coverage Summary
      working-directory: ./front
      run: |
        echo "## 📊 Frontend Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "coverage/lcov.info" ] && [ -s "coverage/lcov.info" ]; then
          echo "✅ **Status:** Coverage report generated" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Report:** Available in artifacts (frontend-coverage-report)" >> $GITHUB_STEP_SUMMARY
          
          # Essayer d'extraire quelques métriques de base
          TOTAL_LINES=$(grep -c "^LF:" coverage/lcov.info 2>/dev/null || echo "0")
          if [ "$TOTAL_LINES" -gt 0 ]; then
            echo "📈 **Lines found:** $TOTAL_LINES" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "🔍 **Details:** Check the HTML report in artifacts" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Status:** Coverage report not generated properly" >> $GITHUB_STEP_SUMMARY
          echo "🔧 **Action needed:** Check Karma configuration" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY

    - name: Frontend Tests Completed
      run: echo "✅ Frontend tests completed"

  # Job pour construire les images Docker
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Backend Docker Image
      run: |
        cd back
        docker build -t bobapp-back:${{ github.sha }} .

    - name: Build Frontend Docker Image
      run: |
        cd front
        docker build -t bobapp-front:${{ github.sha }} .

    - name: Test Docker Compose
      run: |
        # Utiliser la nouvelle syntaxe docker compose (sans tiret)
        docker compose build
        docker compose up -d
        sleep 30
        
        # Test des endpoints
        echo "Testing backend endpoint..."
        curl -f http://localhost:8080/api/joke || exit 1
        echo "Backend test passed ✅"
        
        echo "Testing frontend endpoint..."
        curl -f http://localhost:4020 || exit 1
        echo "Frontend test passed ✅"
        
        # Nettoyer
        docker compose down

  # Job pour déployer (si tous les tests passent)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "✅ Deployment successful!"